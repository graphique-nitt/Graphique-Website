{"ast":null,"code":"import _asyncToGenerator from \"/mnt/c/Users/hammo/Graphique-Website/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { PolygonMask } from \"./Options/Classes/PolygonMask\";\nimport { PolygonMaskInstance } from \"./PolygonMaskInstance\";\nimport { isSsr } from \"../../Utils\";\n\nclass PolygonMaskPlugin {\n  constructor() {\n    this.id = \"polygonMask\";\n  }\n\n  getPlugin(container) {\n    return new PolygonMaskInstance(container);\n  }\n\n  needsPlugin(options) {\n    var _a, _b, _c;\n\n    return (_b = (_a = options === null || options === void 0 ? void 0 : options.polygon) === null || _a === void 0 ? void 0 : _a.enable) !== null && _b !== void 0 ? _b : ((_c = options === null || options === void 0 ? void 0 : options.polygon) === null || _c === void 0 ? void 0 : _c.type) !== undefined && options.polygon.type !== \"none\";\n  }\n\n  loadOptions(options, source) {\n    if (!this.needsPlugin(source)) {\n      return;\n    }\n\n    const optionsCast = options;\n    let polygonOptions = optionsCast.polygon;\n\n    if ((polygonOptions === null || polygonOptions === void 0 ? void 0 : polygonOptions.load) === undefined) {\n      optionsCast.polygon = polygonOptions = new PolygonMask();\n    }\n\n    polygonOptions.load(source === null || source === void 0 ? void 0 : source.polygon);\n  }\n\n}\n\nexport function loadPolygonMaskPlugin(_x) {\n  return _loadPolygonMaskPlugin.apply(this, arguments);\n}\n\nfunction _loadPolygonMaskPlugin() {\n  _loadPolygonMaskPlugin = _asyncToGenerator(function* (engine) {\n    if (!isSsr() && !(\"SVGPathSeg\" in window)) {\n      yield import(\"./pathseg\");\n    }\n\n    const plugin = new PolygonMaskPlugin();\n    yield engine.addPlugin(plugin);\n  });\n  return _loadPolygonMaskPlugin.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}