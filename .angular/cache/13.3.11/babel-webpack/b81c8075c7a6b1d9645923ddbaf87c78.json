{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { InjectionToken, ɵɵdefineInjectable, ɵɵinject, Injectable, Inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nconst API_KEY = new InjectionToken('Google Sheets API key');\nlet GoogleSheetsDbService = /*#__PURE__*/(() => {\n  class GoogleSheetsDbService {\n    constructor(http, apiKey) {\n      this.http = http;\n      this.apiKey = apiKey;\n      this.defaultActiveValues = ['true', '1', 'yes'];\n    }\n\n    get(spreadsheetId, worksheetName, attributesMapping) {\n      return this.getRows(spreadsheetId, worksheetName).pipe(map(rows => this.rowsToEntries(rows).map(entry => this.getObjectFromEntry(entry, attributesMapping))));\n    }\n\n    getActive(spreadsheetId, worksheetName, attributesMapping, isActiveColumnName = 'is_active', activeValues = null) {\n      if (activeValues === null) {\n        activeValues = this.defaultActiveValues;\n      } else if (!Array.isArray(activeValues)) {\n        activeValues = [activeValues];\n      }\n\n      return this.getRows(spreadsheetId, worksheetName).pipe(map(rows => this.rowsToEntries(rows).filter(obj => activeValues.includes(obj[isActiveColumnName].toLowerCase())).map(entry => this.getObjectFromEntry(entry, attributesMapping))));\n    }\n\n    getSpreadsheetUrl(spreadsheetId, worksheetName) {\n      return 'https://sheets.googleapis.com/v4/spreadsheets/' + spreadsheetId + '/values/' + encodeURI(worksheetName) + '?key=' + this.apiKey;\n    }\n\n    getRows(spreadsheetId, worksheetName) {\n      const spreadsheetUrl = this.getSpreadsheetUrl(spreadsheetId, worksheetName);\n      return this.http.get(spreadsheetUrl).pipe(map(jsonRes => jsonRes.values), catchError(this.handleError));\n    }\n\n    rowsToEntries(rows) {\n      const columns = rows[0].map(this.cleanColumnName);\n      return rows.slice(1).map(row => columns.reduce((entry, columnName, idx) => {\n        entry[columnName] = row.length > idx ? row[idx] : '';\n        return entry;\n      }, {}));\n    }\n\n    cleanColumnName(columnName) {\n      return columnName.trim();\n    }\n\n    arrayToObject(array) {\n      return array.reduce((acc, cur) => {\n        acc[cur] = cur;\n        return acc;\n      }, {});\n    }\n\n    getObjectFromEntry(entry, attributesMapping) {\n      if (Array.isArray(attributesMapping)) {\n        attributesMapping = this.arrayToObject(attributesMapping);\n      }\n\n      return this.getObjectFromEntryObject(entry, attributesMapping);\n    }\n\n    getObjectFromEntryObject(entry, attributesMapping, columnNamePrefix = '') {\n      const obj = {};\n\n      for (const attr in Object(attributesMapping)) {\n        if (attributesMapping.hasOwnProperty(attr) && !['_prefix', '_listField'].includes(attr)) {\n          if (typeof attributesMapping[attr] === 'string') {\n            obj[attr] = this.getValueFromEntry(entry, columnNamePrefix + attributesMapping[attr]);\n          } else if (typeof attributesMapping[attr] === 'object') {\n            let columnName = '';\n\n            if (attributesMapping[attr].hasOwnProperty('_prefix')) {\n              columnName = attributesMapping[attr]._prefix;\n            }\n\n            if (attributesMapping[attr]._listField) {\n              obj[attr] = this.getListFromEntry(entry, columnNamePrefix + columnName);\n            } else {\n              obj[attr] = this.getObjectFromEntryObject(entry, attributesMapping[attr], columnNamePrefix + columnName);\n            }\n          } else {\n            console.log(`Unknown type for ${attr}`);\n          }\n        }\n      }\n\n      return obj;\n    }\n\n    getValueFromEntry(entry, attribute) {\n      attribute = this.cleanColumnName(attribute);\n\n      if (entry.hasOwnProperty(attribute)) {\n        return entry[attribute];\n      } else {\n        return null;\n      }\n    }\n\n    getListFromEntry(entry, attribute) {\n      const list = [];\n      let i = 1;\n      let curElement = this.getValueFromEntry(entry, `${attribute}${i}`);\n\n      while (curElement) {\n        list.push(curElement);\n        i++;\n        curElement = this.getValueFromEntry(entry, `${attribute}${i}`);\n      }\n\n      return list;\n    }\n\n    handleError(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('An error occurred:', error.error.message);\n      } else {\n        console.error(`Backend returned code ${error.status}, body was: ${error.error}`);\n      }\n\n      return throwError('Something bad happened; please try again later.');\n    }\n\n  }\n\n  GoogleSheetsDbService.ɵfac = function GoogleSheetsDbService_Factory(t) {\n    return new (t || GoogleSheetsDbService)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(API_KEY));\n  };\n\n  GoogleSheetsDbService.ɵprov = ɵɵdefineInjectable({\n    factory: function GoogleSheetsDbService_Factory() {\n      return new GoogleSheetsDbService(ɵɵinject(HttpClient), ɵɵinject(API_KEY));\n    },\n    token: GoogleSheetsDbService,\n    providedIn: \"root\"\n  });\n  return GoogleSheetsDbService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Public API Surface of ng-google-sheets-db\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { API_KEY, GoogleSheetsDbService }; //# sourceMappingURL=ng-google-sheets-db.js.map","map":null,"metadata":{},"sourceType":"module"}