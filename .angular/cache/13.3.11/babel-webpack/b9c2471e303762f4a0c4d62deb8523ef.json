{"ast":null,"code":"import _asyncToGenerator from \"/mnt/c/Users/hammo/Graphique-Website/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ExternalInteractorBase } from \"../../../Core\";\nimport { isInArray } from \"../../../Utils\";\nexport class Connector extends ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n\n  isEnabled() {\n    const container = this.container,\n          mouse = container.interactivity.mouse,\n          events = container.actualOptions.interactivity.events;\n\n    if (!(events.onHover.enable && mouse.position)) {\n      return false;\n    }\n\n    return isInArray(\"connect\", events.onHover.mode);\n  }\n\n  reset() {}\n\n  interact() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const container = _this.container,\n            options = container.actualOptions;\n\n      if (options.interactivity.events.onHover.enable && container.interactivity.status === \"mousemove\") {\n        const mousePos = container.interactivity.mouse.position;\n\n        if (!mousePos) {\n          return;\n        }\n\n        const distance = Math.abs(container.retina.connectModeRadius),\n              query = container.particles.quadTree.queryCircle(mousePos, distance);\n        let i = 0;\n\n        for (const p1 of query) {\n          const pos1 = p1.getPosition();\n\n          for (const p2 of query.slice(i + 1)) {\n            const pos2 = p2.getPosition(),\n                  distMax = Math.abs(container.retina.connectModeDistance),\n                  xDiff = Math.abs(pos1.x - pos2.x),\n                  yDiff = Math.abs(pos1.y - pos2.y);\n\n            if (xDiff < distMax && yDiff < distMax) {\n              container.canvas.drawConnectLine(p1, p2);\n            }\n          }\n\n          ++i;\n        }\n      }\n    })();\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}